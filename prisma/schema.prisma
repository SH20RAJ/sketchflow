datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  username                String?                 @unique
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  projects                Project[]
  projectTags             ProjectTag[]
  subscription            Subscription?
  payments                Payment[]
  articles                Article[]
  comments                Comment[]
  claps                   Clap[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  AdminLog                AdminLog[]
  collaborations          ProjectCollaborator[]
  invitedCollaborations   ProjectCollaborator[]  @relation("InvitedBy")
  collaborationActivities CollaborationActivity[]
  projectComments         ProjectComment[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id               String                  @id @default(cuid())
  name             String
  description      String?
  emoji            String? // Project emoji
  color            String? // Project background color
  userId           String
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  diagrams         Diagram[]
  markdowns        Markdown[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  shared           Boolean                 @default(false)
  projectTags      ProjectTag[] // Relation to ProjectTag
  collaborators    ProjectCollaborator[]
  activities       CollaborationActivity[]
  comments         ProjectComment[]
  originalProjectId String? // For cloned projects
  originalProject  Project?                @relation("ProjectClones", fields: [originalProjectId], references: [id], onDelete: SetNull)
  clones           Project[]               @relation("ProjectClones")
  embedConfig      ProjectEmbed?

  @@index([userId])
  @@index([originalProjectId])
}

model ProjectTag {
  id        String    @id @default(cuid())
  name      String
  emoji     String? // Tag emoji
  color     String? // Tag color for visual distinction
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, userId]) // Each tag name should be unique per user
  @@index([userId])
}

model Diagram {
  id        String   @id @default(cuid())
  name      String
  content   Json
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Markdown {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status               String    @default("inactive") // active, inactive, cancelled
  planId               String
  plan                 Plan      @relation(fields: [planId], references: [id])
  startDate            DateTime  @default(now())
  endDate              DateTime?
  razorpayId           String?   @unique
  lemonSubscriptionId  String?   @unique
  paypalSubscriptionId String?   @unique // Added for PayPal
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([planId])
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String
  price         Int
  duration      Int            @default(30) // duration in days, default 30 days
  features      String         @db.Text // Stored as JSON string
  active        Boolean        @default(true)
  billingCycle  BillingCycle   @default(MONTHLY)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Payment {
  id                   String   @id
  razorpayId           String?  @unique
  cfOrderId            String?  @unique
  lemonOrderId         String?  @unique
  paypalSubscriptionId String?  @unique // Added for PayPal
  amount               Int
  currency             String   @default("INR")
  status               String
  orderId              String?  @unique
  gatewayData          Json?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.LongText
  excerpt     String    @db.Text
  coverImage  String?
  published   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  claps       Clap[]
  tags        Tag[]
  seoTitle    String?
  seoDesc     String?
  readingTime Int       @default(0)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@fulltext([title, content])
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  articleId String
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
}

model Clap {
  id        String   @id @default(cuid())
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, userId])
  @@index([articleId])
  @@index([userId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  section   String
  key       String
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([section, key], name: "section_key")
  @@index([section])
}

model AdminLog {
  id        String   @id @default(cuid())
  action    String
  section   String?
  details   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([userId])
}

// Collaboration models
model ProjectCollaborator {
  id           String   @id @default(cuid())
  projectId    String
  userId       String
  role         Role     @default(VIEWER)
  inviteStatus Status   @default(PENDING)
  invitedBy    String
  invitedAt    DateTime @default(now())
  acceptedAt   DateTime?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter      User     @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([invitedBy])
}

// Collaboration activity log
model CollaborationActivity {
  id           String   @id @default(cuid())
  projectId    String
  userId       String
  action       String   // e.g., "edited", "commented", "added element"
  details      Json?    // Additional details about the action
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
}

// Comment on specific elements or sections
model ProjectComment {
  id           String   @id @default(cuid())
  projectId    String
  userId       String
  content      String   @db.Text
  elementId    String?  // ID of the element being commented on (if applicable)
  position     Json?    // Position in the canvas (x, y coordinates)
  resolved     Boolean  @default(false)
  parentId     String?  // For threaded comments
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       ProjectComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      ProjectComment[] @relation("CommentReplies")

  @@index([projectId])
  @@index([userId])
  @@index([parentId])
}

// Enums for collaboration
enum Role {
  OWNER
  EDITOR
  COMMENTER
  VIEWER
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

// Project embed configuration
model ProjectEmbed {
  id             String    @id @default(cuid())
  projectId      String    @unique
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  token          String    @unique
  accessControl  String    @default("public") // public, token, domain
  allowedDomains String    @default("") // Comma-separated list of domains
  expiresAt      DateTime?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([projectId])
  @@index([token])
}
